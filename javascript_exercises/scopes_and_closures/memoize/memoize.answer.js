/**
 * memoize функция умеет сохранять результаты вызовов переданной функции с одинаковыми аргументами
 * 
 * Сохранение происходит в переменной cache внутри своего лексического окружения, доступ к которому есть также у возвращаемой функции
 * 
 * @param {*} func - декорируемая функция
 */
function memoize(func) {
    // Объект хранит в себе результаты вызовов
    const cache = {};

    return function(...args) {
        // В качестве ключа будет строка состоящая из аргументов
        const key = JSON.stringify(args);
        // Если вызов с такими аргументами уже был сохранен, то вернуть его
        if (cache[key]) return cache[key];

        // В ином случае вызвать декорируемую функцию и получить результат
        const result = func(...args);
        // Сохранить результат с объекте
        cache[key] = result;
        return result;
    }
}

// Проверочный код
const sum = (a,b) => a + b;

const memoizedSum = memoize(sum);

console.log(memoizedSum(1, 2)) // Результат считается с помощью sum и сохраняется внутри memoize
console.log(memoizedSum(1, 2)) // Повторный вызов с теми же аргументами берет результат из контекста функции memoize 

export { memoize }; 